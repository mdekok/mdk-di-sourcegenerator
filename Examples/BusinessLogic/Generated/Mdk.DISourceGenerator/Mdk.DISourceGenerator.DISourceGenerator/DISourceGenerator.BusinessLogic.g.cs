// <auto-generated />

using Microsoft.Extensions.DependencyInjection;

namespace Mdk.DISourceGenerator;

/// <summary>Dependency injection registrations for BusinessLogic.</summary>
public static partial class DIRegistrations
{
    /// <summary>Registers the services for BusinessLogic and referenced assemblies.</summary>
    public static IServiceCollection RegisterServicesBusinessLogic(this IServiceCollection services)
    {
        if (registeredServicesBusinessLogic)
            return services;

        services.RegisterServicesBusinessBaseLogic();

        services.AddScoped<global::BusinessLogic.IInterface1, global::BusinessLogic.MyInterfacedService>();
        services.AddScoped(typeof(global::BusinessLogic.IInterface2<>), typeof(global::BusinessLogic.MyInterfacedGenericService<>));
        services.AddScoped<global::BusinessLogic.IInterface2<int>, global::BusinessLogic.MyInterfacedIntGenericService>();
        services.AddScoped<global::BusinessLogic.IInterface3, global::BusinessLogic.MyDoubleInterfacedService>();
        services.AddScoped<global::BusinessLogic.IInterface4, global::BusinessLogic.MyDoubleInterfacedService>();
        services.AddScoped(typeof(global::BusinessLogic.MyGenericService<>));
        services.AddScoped<global::BusinessLogic.MyService>();

        registeredServicesBusinessLogic = true;

        return services;
    }

    private static bool registeredServicesBusinessLogic;
}
